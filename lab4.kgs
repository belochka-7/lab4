<?xml version="1.0" encoding="utf-8"?>
<project vert="varying vec2 texCoord;&#xD;varying vec3 Position;&#xD; &#xD;uniform mat4 iModelViewMatrix;&#xD; &#xD;uniform vec3 iLightPos; &#xD;uniform vec3 iCamPos; &#xD; &#xD;varying vec3 iLightPos_mv;&#xD;varying vec3 iCamPos_mv;&#xD; &#xD; &#xD;void main(void)&#xD;{&#xD;    gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix*vec4(gl_Vertex.xyz,1.0);&#xD;    Position = (gl_ModelViewMatrix*gl_Vertex).xyz;&#xD;    texCoord = gl_MultiTexCoord0.xy;&#xD;    &#xD;    iLightPos_mv = (iModelViewMatrix*vec4(iLightPos,1.0)).xyz;    &#xD;    iCamPos_mv = (iModelViewMatrix*vec4(iCamPos,1.0)).xyz;&#xD;}" pix="varying vec2 texCoord;&#xD;varying vec3 Position;&#xD;vec3 Ia = vec3(0.2,0.2,0.2);&#xD;vec3 Id = vec3(0.7,0.7,0.7);&#xD;vec3 Is = vec3(1.0,1.0,1.0);&#xD;vec3 ma = vec3(1,1,1);&#xD;vec3 md = vec3(1,1,1);&#xD;vec3 ms = vec3(1,1,1);&#xD;&#xD;varying vec3 iLightPos_mv;&#xD;varying vec3 iCamPos_mv;&#xD;&#xD;uniform sampler2D iTexture0;&#xD;uniform sampler2D iTexture1;&#xD;&#xD;bool ellipse(float x, float y, float a, float b, float h, float k, float angle)&#xD;{&#xD;&#x9;float left = pow((x-h)*cos(angle)+(y-k)*sin(angle),2)/(a*a);&#xD;&#x9;float right = pow((x-h)*sin(angle)-(y-k)*cos(angle),2)/(b*b);&#xD;&#x9;return left + right &lt; 1.0;&#xD;}&#xD;&#xD;void phong(vec3 rgb, vec3 norm)&#xD;{&#xD;&#x9;vec3 color_amb = Ia*ma;&#xD;&#x9;vec3 light_vector = normalize(iLightPos_mv - Position);&#xD;&#x9;vec3 color_dif = Id*md*dot(light_vector, norm);&#xD;  &#xD;&#x9;vec3 cam_vector = normalize(iCamPos_mv - Position);&#xD;&#x9;vec3 reflect_vector = reflect(-light_vector, norm);&#xD;&#x9;float cosRC = max(0.0,dot(cam_vector,reflect_vector));  &#xD;&#x9;vec3 col_spec = Is*ms*pow(cosRC,300.0);&#xD;  &#xD;&#x9;gl_FragColor = vec4((color_amb + color_dif)*rgb + col_spec,1.0);&#xD;}&#xD;  &#xD;void main(void)&#xD;{&#x9;&#xD;&#x9;float x = texCoord.x, y = texCoord.y;&#xD;&#x9;if (ellipse(x*5, y*5, 2.5, 1.0, 1.82, 1.0, 0.8))&#xD;&#x9;{&#xD;&#x9;&#x9;vec2 coord = texCoord*mat2(cos(0.8), sin(0.8), -sin(0.8), cos(0.8))-vec2(0.0, 0.5);&#xD;&#x9;&#x9;vec3 rgb = texture2D(iTexture0, coord).rgb;&#xD;&#x9;&#x9;vec3 norm = normalize(gl_NormalMatrix*(texture2D(iTexture1,coord).rgb*2.0-1.0));&#xD;&#x9;&#x9;phong(rgb, norm);&#xD;&#x9;}&#xD;&#x9;else if (x &gt; 0.3 &amp;&amp; ellipse(x*5, y*5, 2.5, 1.0, 2.0, 1.0, 0.3))&#xD;&#x9;{&#xD;&#x9;&#x9;vec2 coord = texCoord*mat2(cos(0.3), sin(0.3), -sin(0.3), cos(0.3))-vec2(0.0, 0.5);&#xD;&#x9;&#x9;vec3 color = vec3(0.3, 0.6, 0.0);&#xD;&#x9;&#x9;vec3 norm = normalize(gl_NormalMatrix*(texture2D(iTexture1,coord).rgb*2.0-1.0));&#xD;&#x9;&#x9;phong(color, norm);&#xD;&#x9;}&#xD;&#x9;else&#xD;&#x9;&#x9;gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);&#xD;}" tt0="1" t0="Texture.jpeg" tt1="1" t1="NormalMap.png" tt2="0" t2="" tt3="0" t3="" />